1. Linux-Befehle:
- Einführung in die Linux-Befehle:
Linux bietet zahlreiche Befehle, die direkt in der Shell oder in Skripten verwendet werden können, z. B. cp, alias, cat, rm, usw.
Die Shell bietet auch Programmierstrukturen wie Schleifen, Konditionale, Variablen usw.
Beide Elemente können in einem Skript verwendet werden, um Aufgaben auf dem System zu automatisieren.
- Kommandozeilenprogramm (Terminal) und Linux-Eingabeaufforderung:
Das Kommandozeilentool (Terminal) ermöglicht die Ausführung von Bash-Befehlen, wobei einige Tastenkombinationen zur Verfügung stehen.
Das Standardformat der Eingabeaufforderung kann angepasst werden. Es enthält normalerweise den aktuellen Benutzernamen, den Hostnamen und das Verzeichnis.
- Tilde (~) Zeichen und Semikolon (;):
Die Tilde (~) steht für das Heimatverzeichnis des aktuellen Benutzers.
Semikolon (;) trennt einzelne Befehle in einer Zeile (Befehlsfolge).
- Pipe (|) und Raute (#):
Die Pipe (|) verkettet einzelne Befehle in einer Zeile (Piping).
Das Rautenzeichen (#) kennzeichnet den Beginn eines Kommentars.
- Ausführung im Hintergrund (&):
Wenn Sie ein kaufmännisches Und (&) an das Ende eines Befehls anhängen, wird der Befehl im Hintergrund ausgeführt.
- Hilfe erhalten:
Befehle wie man, apropos und which werden verwendet, um Hilfe zu erhalten oder den Speicherort von installierten Programmen zu finden.
- System-spezifische Befehle:
Befehle wie reboot, shutdown, init werden verwendet, um das System neu zu starten oder herunterzufahren.
Verzeichnisbezogene Befehle wie pwd, cd, mkdir, rmdir, ls und find werden für die Navigation und die Bearbeitung von Dateien verwendet.
- Pfadangabe:
Es werden Beispiele für absolute und relative Pfade gegeben.
- Dateibezogene Befehle:
Befehle wie cp, rm, mv, touch, cat, wc und echo werden für Dateioperationen verwendet.
Für Abkürzungen zu Befehlen oder Befehlskombinationen können Aliase erstellt werden.
 
- Platzhalter und Klammererweiterung:
Platzhalter wie *, ?, {}, {..} und ! werden für den Mustervergleich und die Erweiterung verwendet.
- Tilde-Erweiterung:
Nützliche Tilde-Erweiterungen für Home-Verzeichnisse, aktuelles Verzeichnis, vorheriges Verzeichnis usw. werden erklärt.
2. Shell-Programmierung:
- Einführung in die Shell-Programmierung:
Die Shell-Programmierung umfasst das Schreiben von Skripten zur Automatisierung von Aufgaben unter Verwendung von Shell-Befehlen und -Konstrukten.
Die gebräuchlichste Shell-Skriptsprache ist Bash.
- Skript-Ausführung:
Skripte können ausgeführt werden, indem der Shell-Interpreter direkt aufgerufen wird (bash script_name.sh) oder indem das Skript ausführbar gemacht und direkt ausgeführt wird (./script_name.sh).
Die Dateiberechtigungen müssen so gesetzt sein, dass das Skript ausgeführt werden kann.
- Shebang (#!) Zeile:
Die Shebang-Zeile (#!) am Anfang eines Skripts gibt den Pfad zum Shell-Interpreter an.
- Variablen:
Variablen in Shell-Skripten werden mit der Syntax variable_name=wert zugewiesen.
Bei Variablennamen wird zwischen Gross- und Kleinschreibung unterschieden, sie können Buchstaben, Zahlen und Unterstriche enthalten, müssen aber mit einem Buchstaben oder Unterstrich beginnen.
- Datentypen:
Shell-Skripte arbeiten in erster Linie mit Zeichenketten, aber arithmetische Operationen können mit Integer-Variablen durchgeführt werden.
-  Spezialvariablen:
Spezielle Variablen wie $0, $1, $@, $#, $? und $$ sind vordefiniert und liefern Informationen über das Skript und seine Ausführungsumgebung.
-  Anführungszeichen:
Einfache Anführungszeichen (') bewahren den wörtlichen Wert jedes Zeichens innerhalb der Anführungszeichen.
Doppelte Anführungszeichen (") ermöglichen die Erweiterung von Variablen und die Interpretation einiger Sonderzeichen.
- Befehlssubstitution:
Die Befehlssubstitution ermöglicht es, die Ausgabe eines Befehls zu erfassen und sie einer Variablen zuzuweisen oder sie in einem Skript zu verwenden.
- Arithmetische Erweiterung:
Die arithmetische Expansion ermöglicht die Durchführung arithmetischer Operationen innerhalb eines Skripts unter Verwendung der Syntax ((...)).
- Bedingte Anweisungen:
Bedingte Anweisungen wie if, elif und else ermöglichen die Ausführung verschiedener Befehle auf der Grundlage der Auswertung von Bedingungen.
- Schleifen:
Schleifen wie for, while und until werden verwendet, um Befehle oder Gruppen von Befehlen zu wiederholen, bis eine Bedingung erfüllt ist.
- Funktionen:
Funktionen ermöglichen es, eine Reihe von Befehlen zur Wiederverwendung in einem Skript zu kapseln.
- Beendigungsstatus:
Der Exit-Status eines Befehls oder Skripts kann mit Hilfe von bedingten Anweisungen oder durch Zugriff auf die Variable $? überprüft werden.
- Fehlersuche:
Techniken zum Debuggen von Shell-Skripten umfassen Echo-Anweisungen, set -x, um den Debugging-Modus zu aktivieren, und die Verwendung von shellcheck für die statische Analyse.
3. Reguläre Ausdrücke (Regex):
- Einführung in reguläre Ausdrücke:
Reguläre Ausdrücke sind Muster, die verwendet werden, um Zeichenkombinationen in Zeichenketten abzugleichen.
Sie werden häufig für die Suche, den Abgleich und die Manipulation von Text verwendet.
- Grundlegende Syntax:
Reguläre Ausdrücke bestehen aus normalen Zeichen (wie Buchstaben und Ziffern) und Sonderzeichen (Metazeichen), die eine besondere Bedeutung haben.
Zu den Metazeichen gehören ^, $, ., *, +, ?, [ ], { }, |, (, und ).
- Zeichenklassen:
Zeichenklassen ermöglichen die Angabe einer Gruppe von Zeichen, die übereinstimmen sollen. Zum Beispiel passt [a-z] auf jeden Kleinbuchstaben.
- Verankerungen:
Anker (^ und $) werden verwendet, um den Anfang bzw. das Ende einer Zeile oder Zeichenfolge zu finden.
- Quantifizierer:
Quantifizierer (*, +, ?, {m}, {m,n}) geben an, wie oft ein Zeichen oder eine Gruppe in einer Übereinstimmung vorkommen soll.
- Abwechslung:
Die Alternation (|) ermöglicht es, entweder den einen oder den anderen Ausdruck zu finden.
- Gruppieren und Erfassen:
Klammern ( ) werden zum Gruppieren von Zeichen und zum Erfassen von Übereinstimmungen verwendet.
- Escape-Sequenzen:
Escape-Sequenzen ermöglichen die Eingabe von Sonderzeichen als Literalzeichen. Zum Beispiel passt \. auf einen Punkt.
- Modifikatoren:
Modifikatoren (i, m, s, x) ändern das Verhalten des Regex-Mustervergleichs.
- Allgemeine Regex-Beispiele:
Beispiele für gängige Regex-Muster zum Abgleich von E-Mail-Adressen, URLs, Telefonnummern und mehr.
- Regex-Werkzeuge:
Verschiedene Tools und Bibliotheken unterstützen Regex, darunter Befehlszeilen-Dienstprogramme wie grep, sed und awk sowie Programmiersprachen wie Python, JavaScript und Perl.
4. Versionskontrollsysteme (VCS):
- Einführung in die Versionskontrolle:
Versionskontrollsysteme sind Softwaretools, die zur Verwaltung von Änderungen am Quellcode im Laufe der Zeit eingesetzt werden.
Sie erleichtern die Zusammenarbeit zwischen Entwicklern und helfen bei der Verfolgung von Änderungen an Codebases.
- Arten von Versionskontrollsystemen:
Es gibt zwei Haupttypen von VCS: zentralisierte und verteilte.
Zentralisierte VCS, wie CVS und Subversion, haben einen einzigen, zentralen Server, auf dem alle Versionen eines Projekts gespeichert werden.
Verteilte VCS, wie Git und Mercurial, ermöglichen es jedem Benutzer, eine vollständige Kopie des Repositorys zu haben, was die Flexibilität und Skalierbarkeit erhöht.
- Schlüsselkonzepte:
Repository: Ein Speicherort, an dem der Verlauf und die Versionen eines Projekts gespeichert werden.
Commit: Ein Schnappschuss der Änderungen, die an Dateien im Repository vorgenommen wurden.
Zweig: Eine parallele Version des Projektarchivs, die von der Hauptlinie der Entwicklung abweicht.
Zusammenführen: Das Zusammenführen von Änderungen aus einem Zweig in einen anderen.
Pull-Anfrage: Eine Anfrage zum Zusammenführen von Änderungen aus einem Zweig in einen anderen, die häufig in Code-Review-Workflows verwendet wird.
- Git-Grundlagen:
Initialisieren eines Repositorys: Der Befehl git init initialisiert ein neues Git-Repository.
Klonen eines Repositorys: Der Befehl git clone erstellt eine lokale Kopie eines Repositorys.
Hinzufügen und Übertragen von Änderungen: Mit git add werden Änderungen für die Übergabe bereitgestellt, und mit git commit werden Änderungen im Repository gespeichert.
Verzweigen und Zusammenführen: git branch erzeugt einen neuen Zweig, und git merge führt Änderungen aus einem Zweig in einem anderen zusammen.
Push und Pull: git push sendet lokale Commits an ein entferntes Repository, und git pull holt Änderungen aus einem entfernten Repository und führt sie im lokalen Branch zusammen.
- Git-Arbeitsablauf:
Zu den üblichen Arbeitsabläufen gehören zentralisierte, Feature-Branching- und Forking-Arbeitsabläufe.
Das Verständnis von Verzweigungsstrategien, wie Feature-Branches, Release-Branches und Hotfix-Branches, ist für eine effektive Zusammenarbeit entscheidend.
- GitHub und GitLab:
GitHub und GitLab sind beliebte Hosting-Plattformen für Git-Repositories.
Sie bieten Funktionen für die Zusammenarbeit wie Issue Tracking, Pull Requests und Code Review Tools.
- Bewährte Praktiken:
Befolgen Sie eine klare und konsistente Verzweigungsstrategie.
Schreiben Sie aussagekräftige Commit-Nachrichten.
Ziehen Sie regelmässig Änderungen aus entfernten Repositories, um auf dem neuesten Stand zu bleiben.
Verwenden Sie Pull-Requests für Code-Reviews und Zusammenarbeit.
5. Testgetriebene Entwicklung (TDD):
- Einführung in TDD:
Test-Driven Development ist ein Softwareentwicklungsprozess, der auf der Wiederholung eines sehr kurzen Entwicklungszyklus beruht: rot, grün, refactor.
Der Zyklus beginnt mit dem Schreiben eines fehlgeschlagenen Testfalls (rot), dann mit der Implementierung des minimalen Codes, um den Test zu bestehen (grün), und schliesslich mit der Überarbeitung des Codes, wobei sichergestellt wird, dass alle Tests weiterhin bestehen.
- Vorteile von TDD:
Verbesserte Codequalität: TDD ermutigt dazu, sauberen, modularen und testbaren Code zu schreiben.
Schnelleres Feedback: Tests geben sofortige Rückmeldung über Codeänderungen und verkürzen die Zeit für die Fehlersuche.
Vertrauen in Refactoring: Eine umfassende Testreihe ermöglicht es Entwicklern, Code mit Zuversicht umzugestalten.
- TDD-Zyklus:
Rot: Schreiben Sie einen fehlgeschlagenen Testfall, der das gewünschte Verhalten definiert.
Grün: Schreibe den minimalen Code, der notwendig ist, um den Test zu bestehen.
Refactor: Verbessern Sie den Code, ohne das Verhalten zu ändern, und stellen Sie sicher, dass alle Tests weiterhin erfolgreich sind.
- Test-Frameworks:
Test-Frameworks, wie z. B. JUnit für Java, pytest für Python und Jasmine für JavaScript, bieten Tools zum Schreiben und Ausführen von Tests.
Diese Frameworks unterstützen Assertions, Test-Fixtures und Test-Runner, um den Testprozess zu automatisieren.
- Unit-Tests:
Unit-Tests konzentrieren sich auf das Testen einzelner Einheiten oder Komponenten von Code in Isolation.
Sie sollten schnell, unabhängig und deterministisch sein.
- Integrationstests:
Integrationstests überprüfen die Interaktionen zwischen verschiedenen Komponenten oder Modulen.
Sie stellen sicher, dass diese Komponenten wie erwartet zusammenarbeiten.
- Abnahmetests:
Abnahmetests, auch bekannt als End-to-End-Tests oder Funktionstests, validieren das Verhalten des gesamten Systems aus der Sicht des Benutzers.
Sie simulieren Benutzerinteraktionen und verifizieren, dass das System die spezifizierten Anforderungen erfüllt.
- Mocking und Stubbing:
Mocking und Stubbing sind Techniken, mit denen Codeeinheiten für Tests isoliert werden.
Mock-Objekte simulieren das Verhalten realer Objekte, so dass Entwickler die Interaktionen zwischen Komponenten testen können.
Stubs bieten vorgefertigte Antworten auf Methodenaufrufe und ermöglichen kontrollierte Tests von Code, der von externen Abhängigkeiten abhängt.
Kontinuierliche Integration (CI) und TDD:
CI-Tools wie Jenkins, Travis CI und CircleCI automatisieren den Build- und Testprozess.
Durch die Integration von TDD mit CI wird sichergestellt, dass die Tests automatisch ausgeführt werden, sobald Änderungen an der Codebasis vorgenommen werden, wodurch die Qualität und Stabilität des Codes erhalten bleibt.
- Beste Praktiken:
Schreiben Sie Tests, bevor Sie Produktionscode schreiben.
Halten Sie Tests einfach, fokussiert und unabhängig.
Verwenden Sie aussagekräftige Testnamen und beschreibende Assertions.
Refaktorieren Sie Code und Tests regelmässig, um die Lesbarkeit und Einfachheit zu erhalten.
6. Kontinuierliche Integration und kontinuierliches Deployment (CI/CD):
Einführung in CI/CD:
Continuous Integration (CI) und Continuous Deployment (CD) sind Praktiken, die in der Softwareentwicklung eingesetzt werden, um den Prozess der Integration von Codeänderungen in ein gemeinsames Repository und den Einsatz dieser Änderungen in der Produktion zu automatisieren.
Bei CI werden Codeänderungen häufig in einem zentralen Repository zusammengeführt, wo automatische Builds und Tests zur Validierung der Änderungen durchgeführt werden.
CD erweitert CI durch die automatische Bereitstellung von Codeänderungen in Produktionsumgebungen, nachdem alle Tests bestanden wurden.
- Vorteile von CI/CD:
Schnelleres Feedback: CI/CD-Pipelines liefern schnelles Feedback zu Codeänderungen und helfen dabei, Probleme frühzeitig im Entwicklungszyklus zu erkennen und zu beheben.
Konsistenz: Automatisierte Builds und Bereitstellungen sorgen für konsistente und wiederholbare Prozesse und verringern das Risiko menschlicher Fehler.
Schnellere Markteinführung: Automatisierte Tests und Bereitstellungen verkürzen die Zeit, die benötigt wird, um neue Funktionen und Updates für die Benutzer bereitzustellen.
Verbesserte Zusammenarbeit: CI/CD fördert die Zusammenarbeit zwischen Entwicklern, Testern und Betriebsteams, was zu reibungsloseren Arbeitsabläufen und einer schnelleren Bereitstellung führt.
- Schlüsselkomponenten von CI/CD:
Versionskontrollsystem (VCS): Ein VCS, wie z. B. Git, wird zur Verwaltung und Verfolgung von Änderungen an der Codebasis verwendet.
Automatisierung der Erstellung: CI/CD-Pipelines automatisieren den Prozess der Erstellung der Anwendung aus dem Quellcode.
Automatisierte Tests: Automatisierte Tests, einschliesslich Unit-Tests, Integrationstests und End-to-End-Tests, validieren die Funktionalität und Qualität des Codes.
Automatisierung der Bereitstellung: CD-Pipelines automatisieren die Bereitstellung von Codeänderungen in verschiedenen Umgebungen, z. B. Entwicklung, Staging und Produktion.
Überwachung und Rückmeldung: CI/CD-Pipelines liefern Rückmeldungen über den Status von Builds, Tests und Bereitstellungen, so dass die Teams Probleme schnell erkennen und beheben können.
- CI/CD-Pipeline-Werkzeuge:
Jenkins: Ein weit verbreiteter Open-Source-Automatisierungsserver für das Erstellen, Testen und Bereitstellen von Software.
GitLab CI/CD: Integrierte CI/CD-Pipelines von GitLab, die eine nahtlose Integration mit Git-Repositories bieten.
Travis CI: Ein Cloud-basierter CI-Dienst, der mit GitHub-Repositories integriert wird und automatisierte Tests und Bereitstellungen ermöglicht.
CircleCI: Eine CI/CD-Plattform, die den Softwareentwicklungsprozess automatisiert und verschiedene Programmiersprachen und Bereitstellungsziele unterstützt.
- CI/CD-Best Practices:
Alles automatisieren: Automatisieren Sie den Build-, Test- und Bereitstellungsprozess so weit wie möglich, um den manuellen Aufwand zu minimieren und Fehler zu vermeiden.
Schnelles Feedback: Optimieren Sie CI/CD-Pipelines auf Geschwindigkeit, um den Entwicklern schnelles Feedback zu Codeänderungen zu geben.
Unveränderliche Infrastruktur: Nutzen Sie Infrastructure as Code (IaC) und Containerisierung, um Konsistenz und Wiederholbarkeit bei der Bereitstellung zu gewährleisten.
Sicherheit und Compliance: Integrieren Sie Sicherheitsprüfungen und Compliance-Validierung in CI/CD-Pipelines, um Schwachstellen frühzeitig im Entwicklungsprozess zu erkennen und zu beheben.
Inkrementelle Bereitstellungen: Implementieren Sie Strategien wie Blue-Green Deployments oder Canary Releases, um Ausfallzeiten und Risiken während der Bereitstellung zu minimieren.
- CI/CD-Pipeline-Konfiguration:
Definieren Sie CI/CD-Pipeline-Konfigurationen mit YAML oder einer ähnlichen deklarativen Syntax.
Konfigurieren Sie Pipeline-Phasen für das Erstellen, Testen und Bereitstellen von Anwendungen, indem Sie Abhängigkeiten und Ausführungsbedingungen festlegen.
Verwendung von Umgebungsvariablen und Secrets-Management zur sicheren Speicherung sensibler Informationen, die in der Pipeline verwendet werden.
- CI/CD für Microservices:
Bei CI/CD-Pipelines für Microservices-Architekturen werden einzelne Dienste unabhängig voneinander erstellt, getestet und bereitgestellt.
Orchestrierungs-Tools wie Kubernetes oder Docker Swarm können zur Automatisierung der Bereitstellung und Skalierung von Microservices verwendet werden.
- Überwachung und Beobachtbarkeit:
Implementieren Sie Überwachungs- und Beobachtungstools, um die Leistung und den Zustand von Anwendungen zu verfolgen, die über CI/CD-Pipelines bereitgestellt werden.
Überwachen Sie Metriken wie Reaktionszeit, Fehlerrate und Ressourcennutzung, um Probleme proaktiv zu erkennen und zu beheben.

